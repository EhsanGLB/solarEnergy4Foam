/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | foam-extend: Open Source CFD                    |
|  \\    /   O peration     | Version:     4.1                                |
|   \\  /    A nd           | Web:         http://www.foam-extend.org         |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

libs
(
    "liblduSolvers.so"
    "libSE4Foam.so"
);
application     buoyantBoussinesqSimple4SEFoam;

startFrom       latestTime;

startTime       0;

stopAt          endTime;

endTime         100;

deltaT          0.01;

writeControl    timeStep;

writeInterval   100;

purgeWrite      0;

writeFormat     ascii;

writePrecision  6;

writeCompression compressed;

timeFormat      general;

timePrecision   6;

runTimeModifiable yes;

InfoSwitches
{
    writePrecision  6;
    writeJobInfo    0;
    allowSystemOperations 1;
}

functions
(
    postProcess
    {
        functionObjectLibs    ("libutilityFunctionObjects.so");
        type                  coded;
        name                  postProcess;
        enabled               true;
        outputControl         outputTime;
        redirectType          postProcess;

        code
        #{
            //- making a output file
            std::ofstream output;
            output.open("postProcess.txt",std::ofstream::app);


            //- lookup fields
            const volScalarField& p = mesh().lookupObject<volScalarField>("p");
            const volVectorField& U = mesh().lookupObject<volVectorField>("U");
            const volScalarField& rho = mesh().lookupObject<volScalarField>("rho");
            const volScalarField& nu = mesh().lookupObject<volScalarField>("nu");
            const surfaceScalarField& phi = mesh().lookupObject<surfaceScalarField>("phi");


            //- compute outlet mass rate
            label outletID_ = p.mesh().boundaryMesh().findPatchID("outlet");
            scalar mDot = -1*sum(phi.boundaryField()[outletID_]*rho.boundaryField()[outletID_]);


            //- Print data
            Info << "mDot: " << mDot << endl;

            output << "mDot: " << mDot << "\n";
            output.close();
        #};
    }
);
// ************************************************************************* //
