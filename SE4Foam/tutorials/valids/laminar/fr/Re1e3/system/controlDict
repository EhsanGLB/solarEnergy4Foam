/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | foam-extend: Open Source CFD                    |
|  \\    /   O peration     | Version:     4.1                                |
|   \\  /    A nd           | Web:         http://www.foam-extend.org         |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

libs
(
    "liblduSolvers.so"
    "libSE4Foam.so"
);

application     simple4SEFoam;

startFrom       latestTime;

startTime       0;

stopAt          endTime;

endTime         10000;

deltaT          0.1;

writeControl    timeStep;

writeInterval   10;

purgeWrite      4;

writeFormat     ascii;

writePrecision  6;

writeCompression compressed;

timeFormat      general;

timePrecision   6;

runTimeModifiable yes;

InfoSwitches
{
    writePrecision  6;
    writeJobInfo    0;
    allowSystemOperations 1;
}

functions
(
    postProcess
    {
        functionObjectLibs    ("libutilityFunctionObjects.so");
        type                  coded;
        name                  postProcess;
        enabled               true;
        outputControl         outputTime;
        redirectType          postProcess;

        code
        #{
            //- constant values
            vector lenDir(0, 1, 0);
            scalar d = 0.1;
            scalar len = 1.0;
            scalar rhoRef = 996.5;
            scalar muRef = 8.5e-4;
            scalar nuRef = muRef/rhoRef;


            //- making a output file
            std::ofstream output;
            output.open("postProcess.txt",std::ofstream::app);


            //- lookup fields
            const volScalarField& p = mesh().lookupObject<volScalarField>("p");
            const volVectorField& U = mesh().lookupObject<volVectorField>("U");
            const volScalarField& rho = mesh().lookupObject<volScalarField>("rho");
            const volScalarField& nu = mesh().lookupObject<volScalarField>("nu");
            volScalarField mu = rho*nu;
            const surfaceScalarField& phi = mesh().lookupObject<surfaceScalarField>("phi");
            surfaceScalarField gradUVal = fvc::snGrad(U) & lenDir;



            //- compute friction factor with pressure difference
            label inletID_ = p.mesh().boundaryMesh().findPatchID("inlet");
            label outletID_ = p.mesh().boundaryMesh().findPatchID("outlet");
            label wallID_ = p.mesh().boundaryMesh().findPatchID("tubeWall");
            scalar URef = -1*sum(phi.boundaryField()[inletID_])/sum(p.mesh().magSf().boundaryField()[inletID_]);
            scalar pi = sum(rho.boundaryField()[inletID_]*p.boundaryField()[inletID_]*p.mesh().magSf().boundaryField()[inletID_])/sum(p.mesh().magSf().boundaryField()[inletID_]);
            scalar po = sum(rho.boundaryField()[outletID_]*p.boundaryField()[outletID_]*p.mesh().magSf().boundaryField()[outletID_])/sum(p.mesh().magSf().boundaryField()[outletID_]);
            scalar deltaP = pi - po;
            scalar frDP = (2.0*deltaP*d)/(rhoRef*len*pow(URef, 2.0));


            //- compute friction factor with wall shaer stress
            scalar tau = sum(mu.boundaryField()[wallID_]*mag(gradUVal.boundaryField()[wallID_])*p.mesh().magSf().boundaryField()[wallID_])/sum(p.mesh().magSf().boundaryField()[wallID_]);
            scalar frTau = 8.0*tau/(rhoRef*pow(URef, 2));


            //- compute friction factor with correlation
            scalar Re = (URef*d)/nuRef;
            scalar fr_theo = 64/Re;


            //- Print data
            Info << "Re: " << Re << endl;
            Info << "fr(therorical): " << fr_theo << endl;
            Info << "fr(deltaP): " << frDP << "\t" << "fr(tau): " << frTau << endl;

            output << "fr(therorical): " << fr_theo << "\t" << "fr(deltaP): " << frDP << "\t" << "fr(tau): " << frTau << "\n";
            output.close();
        #};
    }
);
// ************************************************************************* //
